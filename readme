# CMPC-Libros: Gestión de Inventario

Esta aplicación web permite a la tienda CMPC-Libros digitalizar sus procesos de inventario, incluyendo funcionalidades avanzadas de gestión y análisis de datos.

## Tabla de Contenidos

- [Tecnologías Utilizadas](#tecnologías-utilizadas)
- [Requisitos Previos](#requisitos-previos)
- [Configuración con Docker](#configuración-con-docker)
- [Estructura del Proyecto](#estructura-del-proyecto)
- [Registro e Inicio de Sesión](#registro-e-inicio-de-sesión)
- [Gestión de Libros](#gestión-de-libros)
- [Exportación de Datos](#exportación-de-datos)
- [Arquitectura del Sistema](#arquitectura-del-sistema)
- [Modelo de Datos](#modelo-de-datos)
- [Testing](#testing)
- [Despliegue](#despliegue)
- [Documentación de la API](#documentación-de-la-api)  

## Tecnologías Utilizadas

-   Frontend: React (TypeScript), Axios, Redux, antd
-   Backend: NestJS (TypeScript), JWT
-   Base de Datos: PostgreSQL, Sequelize ORM
-   Docker, Docker Compose
-   Swagger/OpenAPI

## Requisitos Previos

-   Docker y Docker Compose instalados en tu sistema.
-   Node.js y npm (opcional, para desarrollo local sin Docker).

## Configuración con Docker

1.  Clona el repositorio:

    ```bash
    git clone https://github.com/jasteeman/tp-libros
    cd tp-libros
    ```

2.  Construye y levanta los contenedores con Docker Compose:

    ```bash
    docker-compose up --build -d
    ```

3.  El frontend estará disponible en `http://localhost` y el backend en `http://localhost:3000`.

## Estructura del Proyecto

tp-libros/
├── backend/
│   ├── src/
│   │   ├── auth/
│   │   ├── libros/
│   │   ├── usuarios/
│   │   ├── main.ts
│   ├── nest-cli.json
│   ├── package.json
├── frontend/
│   ├── src/
│   │   ├── pages/
│   │   │   ├── User.tsx
│   │   │   ├── Home.tsx
│   │   │   ├── Libro.tsx
│   │   │   ├── Login.tsx
│   │   ├── App.tsx
│   ├── public/
│   ├── package.json
├── docker-compose.yml
└── README.md

## Registro e Inicio de Sesión

-   El frontend permite a los usuarios registrarse y iniciar sesión utilizando un formulario.
-   El backend utiliza JWT para la autenticación y autorización de usuarios.
-   Los usuarios autenticados pueden acceder a las funcionalidades de gestión de libros.

## Gestión de Libros

-   **Listado de Libros:**
    -   Permite filtrar por género, editorial, autor y disponibilidad.
    -   Permite ordenar por múltiples campos.
    -   Implementa paginación del lado del servidor.
    -   Implementa búsqueda en tiempo real con debounce.
-   **Formulario de Alta/Edición:**
    -   Permite crear y editar libros con título, autor, editorial, precio, disponibilidad, género e imagen.
    -   Implementa validación reactiva de formularios.
-   **Detalles del Libro:**
    -   Muestra los datos disponibles de un libro específico.

## Exportación de Datos

-   El backend proporciona un endpoint para exportar la lista de libros en formato CSV.

## Arquitectura del Sistema

-   El backend utiliza una arquitectura modular y escalable, siguiendo los principios SOLID.
-   Se implementa un sistema de logging para auditoría de operaciones.
-   Se implementa manejo de errores tanto en el frontend como en el backend.

## Modelo de Datos

-   Se utiliza PostgreSQL con Sequelize ORM.
-   El modelo de datos está normalizado e incluye relaciones apropiadas entre las tablas.
-   Se utilizan transacciones para garantizar la integridad de los datos en operaciones críticas.
-   Se implementa soft delete para el manejo de eliminaciones.

## Testing

-   Se crean tests unitarios para servicios y controladores en NestJS.

## Despliegue

-   Se proporciona un `docker-compose.yml` para el despliegue local de todo el stack. 

## Documentación de la API

-   La API está documentada utilizando Swagger en el siguiente link http://localhost:3000/api
